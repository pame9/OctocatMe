

var vows = require('vows'),
    assert = require('assert'),
    fs = require('fs'),
    path = require('path'),
    ncp = require('../lib/ncp'),
    testFiles = fs.readdirSync('test/fixtures'),
    testSubFiles = fs.readdirSync('test/fixtures/nested'),
    testSymLinks = fs.readdirSync('test/fixtures/symlinks');

vows.describe('ncp core').addBatch({
  "When using ncp to copy a directory": {
    topic: ncp.ncp('./test/fixtures', './test/destdir', this.callback),
    "The completion callback should be called without error": function (err) {
      assert.isNull(err);
    },
  }
}).addBatch({
  "After a copy,": {
    "the contents of the first level of the destination directory": {
      topic: function () {
        fs.readdir('test/destdir', this.callback);
      },
      "should match the first level of the source directory": function (err, files) {
        assert.isNull(err);
        assert.deepEqual(files, testFiles);
      }
    },
    "the contents of a subfolder of the destination directory": {
      topic: function () {
        fs.readdir('test/destdir/nested', this.callback);
      },
      "should match the same subfolder in the source directory": function (err, files) {
        assert.isNull(err);
        assert.deepEqual(files, testSubFiles);
      }
    },
    "the contents of a subfolder with symlinks in the destination directory": {
      topic: function () {
        fs.readdir('test/destdir/symlinks', this.callback);
      },
      "should match the same subfolder in the source directory": function (err, files) {
        assert.isNull(err);
        assert.deepEqual(files, testSymLinks);
      }
    }
  }
}).export(module);
